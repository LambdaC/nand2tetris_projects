function Obstacles.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push constant 4
call Array.new 1
pop this 0
push constant 0
push this 0
add
call Obstacle.new 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 0
add
call Obstacle.new 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 0
add
call Obstacle.new 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 0
add
call Obstacle.new 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop this 1
push constant 30005
call Random.new 1
pop this 2
push pointer 0
return
function Obstacles.getX 1
push argument 0
pop pointer 0
push argument 1
push this 0
add
pop pointer 1
push that 0
pop local 0
push local 0
call Obstacle.getX 1
return
function Obstacles.update 4
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 3
push local 3
call Obstacle.getX 1
pop local 1
push local 1
push constant 16
add
push this 1
sub
push constant 512
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push this 1
sub
push constant 1
neg
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 3
call Obstacle.update 1
pop temp 0
goto IF_END1
label IF_FALSE1
push this 2
push constant 30
call Random.randRange 2
pop local 2
push local 2
push constant 24
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
push local 0
call Obstacles.checkSpace 2
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 3
push constant 490
call Obstacle.setX 2
pop temp 0
label IF_FALSE3
label IF_FALSE2
label IF_END1
goto IF_END0
label IF_FALSE0
push this 2
push constant 30
call Random.randRange 2
pop local 2
push local 2
push constant 24
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push pointer 0
push local 0
call Obstacles.checkSpace 2
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 3
push constant 490
call Obstacle.setX 2
pop temp 0
label IF_FALSE5
label IF_FALSE4
label IF_END0
push local 1
push constant 0
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 3
push constant 513
call Obstacle.setX 2
pop temp 0
label IF_FALSE6
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Obstacles.checkSpace 3
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push argument 1
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 2
push local 2
call Obstacle.getX 1
pop local 1
push local 1
push constant 380
push this 1
push constant 10
call Math.multiply 2
add
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
push constant 511
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
return
label IF_FALSE2
label IF_FALSE1
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
return
function Obstacles.changeSpeedMultiple 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 1
push local 1
push argument 1
push argument 2
call Obstacle.changeSpeed 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Obstacles.clear 3
push argument 0
pop pointer 0
push constant 0
pop local 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 2
push local 2
call Obstacle.getX 1
pop local 1
push local 1
push constant 16
add
push constant 511
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push constant 0
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
call Obstacle.clear 1
pop temp 0
label IF_FALSE1
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Obstacles.draw 3
push argument 0
pop pointer 0
push constant 0
pop local 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 2
push local 2
call Obstacle.getX 1
pop local 1
push local 1
push constant 16
add
push constant 511
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push constant 0
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
call Obstacle.draw 1
pop temp 0
label IF_FALSE1
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Obstacles.reset 2
push argument 0
pop pointer 0
push constant 0
pop local 0
push pointer 0
call Obstacles.clear 1
pop temp 0
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 1
push local 1
push constant 513
call Obstacle.setX 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
push this 1
push constant 0
not
call Obstacles.changeSpeedMultiple 3
pop temp 0
push constant 0
return
function Obstacles.dispose 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 1
push local 1
call Obstacle.dispose 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push this 2
call Random.dispose 1
pop temp 0
push constant 0
return
