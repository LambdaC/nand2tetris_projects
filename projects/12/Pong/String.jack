// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field int length;
	field int maxLength;
	field Array arr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int max) {
		if(max > 0) {
			let arr = Array.new(max);
		}
		let maxLength = max;
		let length = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		if(maxLength > 0) {
			do arr.dispose();
		}
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let arr[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		let arr[length] = c;
		let length = length + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if(length > 0) {
			let length = length - 1;
		}
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int val, index;
		var boolean isNeg;
		let val = 0;
		let index = 0;
		let isNeg = false;
		while(index < length) {
			if(arr[index] = 45) {
				let isNeg = true;
			}else{
				let val = val * 10 + (arr[index] - 48); 
			}
			let index = index + 1;
		}
		if(isNeg) {
			let val = -val;
		}
		return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var String result;
		var int index;
		let result = int2String(Math.abs(val));
		let length = 0;
		if(val < 0) {
			let arr[0] = 45;
			let length =  length + 1;
		}
		let index = 0;
		while(index < result.length()){
			let arr[length] = result.charAt(index);
			let length = length + 1;
			let index = index + 1;
		}
		do result.dispose();
		return;
    }
	
	method String int2String(int val) {
		var int lastDigit;
		var String result;
		let lastDigit = val - ((val / 10) * 10);
		if(val < 10) {
			let result = String.new(1000);
			do result.appendChar(lastDigit + 48);
			return result;
		}else{
			let result = int2String(val/10);
			return result.appendChar(lastDigit + 48);
		}
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
