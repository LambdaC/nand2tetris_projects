// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array ram, freeList;

    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let freeList = 2048;
		let freeList[0] = 14335;	//length
		let freeList[1] = 0;		// pointer to next
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		//var Array block, prevList;
		//let block = freeList;
		//let prevList = 0;
		//while(block[0] < (size + 1)){
		//	let prevList = block;
		//	let block = block[1];
		//}

		//if(block[0] < (size + 3)) {
		//	if(prevList = 0) {
		//		let freeList = freeList[1];
		//	}else{
		//		let prevList[1] = block[1];
		//	}
		//}else{
		//	let block[0] = block[0] - size - 1;
		//	let block = block + block[0];
		//	let block[0] = size + 1;
		//	let block = block + 1;
		//}
		//return block;
		var Array block;
		let block = freeList;
		let freeList = freeList + size;
		return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		//let o[0] = freeList;
		//let freeList = o - 1;
		return;
    }    
}
