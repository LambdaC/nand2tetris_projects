// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
		
	static Array twoToThe;
	
    /** Initializes the library. */
    function void init() {
		var int sum, i;
		let sum = 1;
		let twoToThe = Array.new(16);
		while(i < 16){
			let twoToThe[i] = sum;
			let sum = sum + sum;
			let i = i + 1;
		}
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if(x < 0) {
			return -x;
		}else{
			return x;
		}
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sum, shiftedX, i;
		let sum = 0;
		let shiftedX = x;
		let i = 0;
		if(x = 0 | y = 0) {
			return 0;
		}
		while(i < 16){
			if(Math.bit(y,i)){
				let sum =  sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let i = i + 1;
		}
		return sum;
    }
	
	function boolean bit(int x, int i) {
		return x & twoToThe[i];
	}

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var boolean isNeg;
		var int absX, absY, q, result;
		if(x = 0){
			return 0;
		}
		if((x < 0 & y < 0) | (x > 0 & y > 0)) {
			let isNeg = false;
		}else {
			let isNeg = true;
		}
		
		let absX = Math.abs(x);
		let absY = Math.abs(y);
		
		if((absY > absX) | (y < 0)) {
			return 0;
		}
		
		let q = Math.divide(absX, absY + absY);
		if((absX - (2 * q * absY)) < absY) {
			let result = q + q;
		}else{
			let result = q + q + 1;
		}
		
		if(isNeg){
			return -result;
		}else{
			return result;
		}
    }

	
    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y,j;
		let y = 0;
		let j = 7;
		while(~(j < 0)){
			if(~((y + twoToThe[j]) * (y + twoToThe[j]) > x) & ((y + twoToThe[j]) * (y + twoToThe[j]) > 0 )) {
				let y = y + twoToThe[j];
			}
			let j = j - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if(a > b) {
			return a;
		}else{
			return b;
		}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if(a > b) {
			return b;
		}else {
			return a;
		}
    }
}
